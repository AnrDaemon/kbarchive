DOCUMENT:Q158002  05-MAY-2001  [visualc]
TITLE   :STL Sample for the Predicate Version of partial_sort Function
PRODUCT :Microsoft C Compiler
PROD/VER:winnt:
OPER/SYS:
KEYWORDS:_IK

======================================================================
-------------------------------------------------------------------------------
The information in this article applies to:

 - The Standard C++ Library, included with:
    - *EDITOR Please do not choose this product*Microsoft Visual C++ 32-bit Edition* use 241, 265, 225, version 4.2 
-------------------------------------------------------------------------------

SUMMARY
=======

The sample code below illustrates how to use the predicate version of
partial_sort STL function in Visual C++.

MORE INFORMATION
================

Required Header
---------------

      <algorithm>

Prototype
---------

      template<class RandomAccessIterator, class Compare> inline
      void partial_sort(RandomAccessIterator first,
                        RandomAccessIterator middle,
                        RandomAccessIterator last,
                        Compare compare)

NOTE: The class/parameter names in the prototype do not match the original
version in the header file. Some have been modified to improve readability.

Description
-----------

The partial_sort algorithm sorts the smallest N elements, where N = middle -
first of the sequence [first, last). The remaining elements end up in the range
[middle..last) in an undefined order.

The predicate version of partial_sort uses the compare function for comparisons.

Sample Code
-----------

   ////////////////////////////////////////////////////////////////////// 
   // 
   // Compile options needed: /GX
   // 
   // partial_sort.cpp : Illustrates how to use the predicate version
   //                    of the partial_sort function.
   // 
   // Functions:
   // 
   //    partial_sort : Sort the smallest N elements in a sequence.
   // 
   // Written by Kalindi Sanghrajka
   // of Microsoft Product Support Services,
   // Software Core Developer Support.
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   ////////////////////////////////////////////////////////////////////// 

   // disable warning C4786: symbol greater than 255 character,
   // okay to ignore
   #pragma warning(disable: 4786)

   #include <iostream>
   #include <algorithm>
   #include <functional>
   #include <vector><BR/>
   using namespace std;

   void main()
   {
       const int VECTOR_SIZE = 8 ;

       // Define a template class vector of int
       typedef vector<int, allocator<int> > IntVector ;

       //Define an iterator for template class vector of strings
       typedef IntVector::iterator IntVectorIt ;

       IntVector Numbers(VECTOR_SIZE) ;

       IntVectorIt start, end, it ;

       // Initialize vector Numbers
       Numbers[0] = 4 ;
       Numbers[1] = 10;
       Numbers[2] = 70 ;
       Numbers[3] = 30 ;
       Numbers[4] = 10;
       Numbers[5] = 69 ;
       Numbers[6] = 96 ;
       Numbers[7] = 7;

       start = Numbers.begin() ;   // location of first
                                   // element of Numbers

       end = Numbers.end() ;       // one past the location
                                   // last element of Numbers

       cout << "Before calling partial_sort\n" << endl ;

       // print content of Numbers
       cout << "Numbers { " ;
       for(it = start; it != end; it++)
           cout << *it << " " ;
       cout << " }\n" << endl ;

       // sort the smallest 4 elements in the sequence
       partial_sort(start, start+4, end, less<int>()) ;

       cout << "After calling partial_sort\n" << endl ;

       cout << "Numbers { " ;
       for(it = start; it != end; it++)
           cout << *it << " " ;
       cout << " }\n" << endl ;
   }

   Program Output is:

   Before calling partial_sort

   Numbers { 4 10 70 30 10 69 96 7  }

   After calling partial_sort

   Numbers { 4 7 10 10 70 69 96 30  }

REFERENCES
==========

Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library Reference.

Additional query words: STL partial_sort

======================================================================
Keywords          : _IK 
Technology        : kbVCsearch kbAudDeveloper kbVCLibrary
Version           : winnt:
Issue type        : kbhowto

=============================================================================

THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.

Copyright Microsoft Corporation 2001.