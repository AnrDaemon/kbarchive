DOCUMENT:Q158258  04-MAY-2002  [visualc]
TITLE   :INFO: STL Sample for the reverse_copy Function
PRODUCT :Microsoft C Compiler
PROD/VER::4.2,5.0,6.0
OPER/SYS:
KEYWORDS:kbcode kbtemplate kbSTL kbVC420 kbVC500 kbVC600 kbDSupport

======================================================================
-------------------------------------------------------------------------------
The information in this article applies to:

 - The Standard C++ Library, used with:
    - Microsoft Visual C++, 32-bit Enterprise Edition, versions 4.2, 5.0, 6.0 
    - Microsoft Visual C++, 32-bit Professional Edition, versions 4.2, 5.0, 6.0 
    - Microsoft Visual C++, 32-bit Learning Edition, version 6.0 
    - Microsoft Visual C++.NET (2002) 
-------------------------------------------------------------------------------

NOTE: Microsoft Visual C++ NET (2002) supported both the managed code model that is provided by the .NET Framework and the unmanaged native Windows code model. The information in this article applies to unmanaged Visual C++ code only.

SUMMARY
=======

The sample code below illustrates how to use the reverse_copy STL function in
Visual C++.

MORE INFORMATION
================

Required Header
---------------

      <algorithm>

Prototype
---------

      template<class BidirectionalIterator, class OutputIterator> inline
      OutputIterator reverse_copy(BidirectionalIterator first,

                                 BidirectionalIterator last,
                      OutputIterator result)

NOTE: The class/parameter names in the prototype do not match the version in the
header file. Some have been modified to improve readability.

Description
-----------

The reverse_copy algorithm reverses the order of the elements in the range
[first, last) and copies the result into a sequence of the same size starting at
result. It returns an iterator positioned immediately after the last new element
in the resulting sequence.

Sample Code
-----------

   ////////////////////////////////////////////////////////////////////// 
   // 
   // Compile options needed: /GX
   // 
   // reverse_copy.cpp : Illustrates how to use the reverse_copy function.
   // 
   // Functions:
   // 
   //    reverse_copy - Reverse a sequence, copy the results to another
   //                   same-sized sequence.
   // 
   // Written by Kalindi Sanghrajka
   // of Microsoft Product Support Services,
   // Software Core Developer Support.
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   ////////////////////////////////////////////////////////////////////// 

   // disable warning C4786: symbol greater than 255 character,
   // okay to ignore

   #pragma warning(disable: 4786)

   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>
   #include <functional>

   #if _MSC_VER > 1020   // if VC++ version is > 4.2
      using namespace std;  // std c++ libs implemented in std
      #endif

   void main()

   {

       const int VECTOR_SIZE = 8 ;

       // Define a template class vector of strings
       typedef vector<string, allocator<string> > StrVector ;

       //Define an iterator for template class vector of strings
       typedef StrVector::iterator StrVectorIt ;

       StrVector Tongue_Twister(VECTOR_SIZE) ;
       StrVector Reversed_Twister(VECTOR_SIZE) ;

       StrVectorIt start, end, it, RTstart, RTend ;

       start = Tongue_Twister.begin() ; // location of first
                                        // element of Tongue_Twister

       end = Tongue_Twister.end() ;     // one past the location last
                                        // element of Tongue_Twister

       RTstart = Reversed_Twister.begin() ; // location of first
                                            // element of Reversed_Twister

       RTend = Reversed_Twister.end() ; // one past the location last
                                        // element of Reversed_Twister

       //Initialize vector Tongue_Twister
       Tongue_Twister[0] = "she" ;
       Tongue_Twister[1] = "sells" ;
       Tongue_Twister[2] = "sea" ;
       Tongue_Twister[3] = "shells" ;
       Tongue_Twister[4] = "by";
       Tongue_Twister[5] = "the";
       Tongue_Twister[6] = "sea" ;
       Tongue_Twister[7] = "shore" ;

       cout << "Before calling reverse_copy \n" << endl ;

       // print content of Tongue_Twister
       cout << "Try this Tongue Twister: " ;
       for(it = start; it != end; it++)
           cout << *it << " " ;
       cout << "\n\n" ;

       // reverse the items in the vector Tongue_Twister
       // and copy the results to Reversed_Twister
        reverse_copy(start, end, RTstart) ;

        cout << "After calling reverse_copy: \n"
            << endl ;

       // print content of Tongue_Twister
       cout << "Tongue_Twister: " ;
       for(it = start; it != end; it++)
           cout << *it << " " ;
       cout << "\n\n" ;

       // print content of Reversed_Twister
       cout << "Now try the reversed Tongue Twister: " ;
       for(it = RTstart; it != RTend; it++)
           cout << *it << " " ;
       cout << "\n\n" ;

   }

Program Output is:

Before calling reverse_copy

Try this Tongue Twister: she sells sea shells by the sea shore

After calling reverse_copy:

Tongue_Twister: she sells sea shells by the sea shore

Now try the reversed Tongue Twister: shore sea the by shells sea sells she

REFERENCES
==========

Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library Reference.

Additional query words: STL STLSample reverse_copy

======================================================================
Keywords          : kbcode kbtemplate kbSTL kbVC420 kbVC500 kbVC600 kbDSupport 
Technology        : kbVCsearch kbAudDeveloper kbVCLibrary
Version           : :4.2,5.0,6.0
Issue type        : kbinfo

=============================================================================

THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.

Copyright Microsoft Corporation 2002.