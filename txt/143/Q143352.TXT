DOCUMENT:Q143352  03-AUG-2001  [visualc]
TITLE   :FIX: C2988 on Conversion Operator Between Two Template Classes
PRODUCT :Microsoft C Compiler
PROD/VER::4.0,4.1,4.2
OPER/SYS:
KEYWORDS:kbCompiler kbCPPonly kbVC kbVC500fix

======================================================================
-------------------------------------------------------------------------------
The information in this article applies to:

 - Microsoft C/C++ Compiler (CL.EXE), included with:
    - *EDITOR Please do not choose this product*Microsoft Visual C++ 32-bit Edition* use 241, 265, 225, versions 4.0, 4.1, 4.2 
-------------------------------------------------------------------------------

SYMPTOMS
========

When a conversion operator between two template classes is defined outside the
template class, you may receive this error:

   error C2988: unrecognizable template declaration/definition

RESOLUTION
==========

Define the conversion operator inside the template class body.

STATUS
======

Microsoft has confirmed this to be a bug in the Microsoft products listed at the
beginning of this article. This bug was corrected in Visual C++ version 5.0.

MORE INFORMATION
================

Sample Code to Reproduce Problem
--------------------------------

      /* Compile options needed: None
      */ 

      //#define _WORKAROUND   //uncomment this line to work around

      template<class T>
      class classA
      {
      public:

          classA(T& t) : m_t(t) {}

      protected:
          T m_t;
      };

      template<class T>
      class classB
      {
      public:

         classB(const T& t) : m_t(t) {}

      #ifndef _WORKAROUND
         operator classA<T>();

      #else
         operator classA<T>()   { return classA<T>(m_t); }

      #endif

      protected:
          T m_t;
      };

      #ifndef _WORKAROUND

      // Error C2988 for the following function definition.

      template<class T>
      classB<T>::operator classA<T>()
      {
          return classA<T>(m_t);
      }

      #endif

      void main()
      {

          classB<int> b(2);

         // Invoke template<class T> classB<T>::operator classA<T>()
          classA<int> a = b;
      }

Additional query words: kbVC400bug inline

======================================================================
Keywords          : kbCompiler kbCPPonly kbVC kbVC500fix 
Technology        : kbVCsearch kbAudDeveloper kbCVCComp
Version           : :4.0,4.1,4.2
Issue type        : kbbug
Solution Type     : kbfix

=============================================================================

THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.

Copyright Microsoft Corporation 2001.