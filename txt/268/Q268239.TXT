DOCUMENT:Q268239  03-MAY-2001  [visualc]
TITLE   :BUG: C2084 on Overloading Function Templates
PRODUCT :Microsoft C Compiler
PROD/VER::6.0
OPER/SYS:
KEYWORDS:kbCompiler kbCPPonly kbVC600bug kbDSupport

======================================================================
-------------------------------------------------------------------------------
The information in this article applies to:

 - The C/C++ Compiler (CL.EXE), included with:
    - Microsoft Visual C++, 32-bit Enterprise Edition, version 6.0 
    - Microsoft Visual C++, 32-bit Professional Edition, version 6.0 
    - Microsoft Visual C++, 32-bit Learning Edition, version 6.0 
-------------------------------------------------------------------------------

SYMPTOMS
========

You may receive the following error message if you try to overload a template
function that has class templates as parameters:

   error C2084: function 'void __cdecl f1(class A<T>,class A<T>)'
   already has a body

Please refer to the sample code in the "More Information" section for details.

RESOLUTION
==========

See the workaround in the sample code in the "More Information" section.

STATUS
======

Microsoft has confirmed this to be a bug in the Microsoft products listed at the
beginning of this article.


MORE INFORMATION
================

Steps to Reproduce Behavior
---------------------------

The following sample code demonstrates the bug and the workaround:

   //test.cpp
   // Compiler option needed: none.<BR/>
   //#define WORKAROUND  //Uncomment this line to work around the bug.
   template<class T>
   class A {
   };

   #ifndef WORKAROUND
   template<class T>
   void f1(A<T> a, A<T> b){}
   #else
   template<class T1, class T2>
   void f1(A<T1> a, A<T2> b){}
   #endif
   void f1(A<int> a, A<long> b){} //C2084 here. 
   void f1(A<int> a, A<int> b){}  //Compiles fine.
   void f1(A<long> a, A<long> b){} //Compiles fine.

   int main()
   {
   A<int>  a;
   A<long>  b;
   f1(a,b);
   return 0;
   }

    

Additional query words: C2084

======================================================================
Keywords          : kbCompiler kbCPPonly kbVC600bug kbDSupport 
Technology        : kbVCsearch kbAudDeveloper kbCVCComp
Version           : :6.0
Issue type        : kbbug

=============================================================================

THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.

Copyright Microsoft Corporation 2001.