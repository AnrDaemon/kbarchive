DOCUMENT:Q205681  07-MAY-2001  [visualc]
TITLE   :FIX: Operator ++ In Return Statement May Cause Access Violation
PRODUCT :Microsoft C Compiler
PROD/VER:winnt:6.0
OPER/SYS:
KEYWORDS:kbservicepack kbVC600 kbVS600sp2 kbVS600SP1 kbVS600sp3fix

======================================================================
-------------------------------------------------------------------------------
The information in this article applies to:

 - Microsoft Visual C++, 32-bit Enterprise Edition, version 6.0 
 - Microsoft Visual C++, 32-bit Professional Edition, version 6.0 
 - Microsoft Visual C++, 32-bit Learning Edition, version 6.0 
-------------------------------------------------------------------------------

SYMPTOMS
========

A compiled program may cause access violation if it contains a function
returning a struct by value, and the return expression has either a postfix
increment or decrement operator.

RESOLUTION
==========

There following are workarounds for this problem.

1. Remove the postfix increment/decrement operator from the return expression.

2. Use the prefix increment/decrement operator.

STATUS
======

Microsoft has confirmed this to be a bug in the Microsoft products listed at the
beginning of this article.

This bug was corrected in Visual Studio 6.0 Service Pack 3. For more information
about Visual Studio service packs, please see the following articles in the
Microsoft Knowledge Base:

   Q194022 INFO: Visual Studio 6.0 Service Packs, What, Where, Why

   Q194295 HOWTO: Tell That Visual Studio 6.0 Service Packs Are Installed

MORE INFORMATION
================

To reproduce the problem, build and run the following sample program.

   Sample
   ----------------

   #include <stdio.h>
   #include <stdlib.h>

   typedef struct
   {
    int   type;
    int   offset;
   }
   ST;

   int i;

   struct
   {
    ST  *tab;   
    int used;  
   }
   STAdmin;

   ST MyFunction ()
   {
   #ifdef WORKAROUND_1
      int temp = i++;
      return STAdmin.tab[temp];
   #endif

   #ifdef WORKAROUND_2
      return STAdmin.tab[++i - 1];
   #endif<BR/>

      return STAdmin.tab[i++];
   }

   void main(void)
   {
      ST a;
      int i;

      STAdmin.tab = (ST*) malloc(sizeof(ST)*10);
      STAdmin.used = 0;

      // Initialize the Array 
      for(i=0;i<10;i++)
      {
          STAdmin.tab[i].offset=i;
          printf("%d\n",STAdmin.tab[i].offset);
      }

      // Read in the Array 
      for(i=0;i<10;i++)
      {
   	a = MyFunction();
   	printf("%d\n",a.offset);
      }
   }
   // End of Sample Code

Additional query words: kbDSupport

======================================================================
Keywords          : kbservicepack kbVC600 kbVS600sp2 kbVS600SP1 kbVS600sp3fix 
Technology        : kbVCsearch kbAudDeveloper kbVC600 kbVC32bitSearch
Version           : winnt:6.0
Issue type        : kbbug
Solution Type     : kbfix

=============================================================================

THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.

Copyright Microsoft Corporation 2001.