DOCUMENT:Q156345  26-MAR-2002  [visualc]
TITLE   :INFO: STL Sample for the for_each Function
PRODUCT :Microsoft C Compiler
PROD/VER::4.2,5.0,6.0
OPER/SYS:
KEYWORDS:kbcode kbVC420 kbVC500 kbVC600 kbDSupport

======================================================================
-------------------------------------------------------------------------------
The information in this article applies to:

 - The Standard C++ Library, used with:
    - Microsoft Visual C++, 32-bit Enterprise Edition, versions 4.2, 5.0, 6.0 
    - Microsoft Visual C++, 32-bit Professional Edition, versions 4.2, 5.0, 6.0 
    - Microsoft Visual C++, 32-bit Learning Edition, version 6.0 
    - Microsoft Visual C++.NET (2002) 
-------------------------------------------------------------------------------

SUMMARY
=======

The sample code below illustrates how to use the for_each, begin, and end STL
function in Visual C++.

MORE INFORMATION
================

Required Header
---------------

      <algorithm>

Prototype
---------

      template<class InputIterator, class Function> inline

          Function for_each(InputIterator first,
                            InputIterator last,
                            Function F)

NOTE: The class/parameter names in the prototype do not match the version in the
header file. Some have been modified to improve readability.

Description
-----------

The for_each algorithm calls Function F for each element in the range [first,
last) and returns the input parameter F. This function does not modify any
elements in the sequence.

Sample Code
-----------

NOTE: In the first line of the sample code section, /GX is equivalent to /EHsc in
VC++ .NET and is set by default.

   ////////////////////////////////////////////////////////////////////// 
   // 
   // Compile options needed: /GX
   // 
   // count.cpp : Illustrates how to use the for_each function.
   // 
   // Functions:
   // 
   //   for_each  - Calls function F for every element in a range.
   // 
   //   begin     - Returns an iterator that points to the first element
   //               in a sequence.
   // 
   //   end       - Returns an iterator that points one past the end of
   //               a sequence.
   // 
   // Written by Kalindi Sanghrajka
   // of Microsoft Product Support Services,
   // Software Core Developer Support.
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   ////////////////////////////////////////////////////////////////////// 

   // disable warning C4786: symbol greater than 255 character,
   // okay to ignore

   #pragma warning(disable: 4786)

   #include <iostream>
   #include <vector>
   #include <algorithm>

   #if _MSC_VER > 1020   // if VC++ version is > 4.2
      using namespace std;  // std c++ libs implemented in std
      #endif

   // prints the cube of integer n
   void PrintCube(int n)

   {

       cout << n * n * n << " " ;

   }

   void main()

   {

       const int VECTOR_SIZE = 8 ;

       // Define a template class vector of integers
       typedef vector<int, allocator<int> > IntVector ;

       //Define an iterator for template class vector of integer
       typedef IntVector::iterator IntVectorIt ;

       IntVector Numbers(VECTOR_SIZE) ;   //vector containing numbers

       IntVectorIt start, end, it ;

       int i ;

       // Initialize vector Numbers
       for (i = 0; i < VECTOR_SIZE; i++)
           Numbers[i] = i + 1 ;

       start = Numbers.begin() ;   // location of first
                                   // element of Numbers

       end = Numbers.end() ;       // one past the location
                                   // last element of Numbers

       // print content of Numbers
       cout << "Numbers { " ;
       for(it = start; it != end; it++)
           cout << *it << " " ;
       cout << " }\n" << endl ;

       // for each element in the range [first, last)
       // print the cube of the element
       for_each(start, end, PrintCube) ;
       cout << "\n\n" ;

   }

Output:

Numbers { 1 2 3 4 5 6 7 8  }

1 8 27 64 125 216 343 512

REFERENCES
==========

Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library Reference.

Additional query words: STL STLSample for_each begin end

======================================================================
Keywords          : kbcode kbVC420 kbVC500 kbVC600 kbDSupport 
Technology        : kbVCsearch kbAudDeveloper kbVCNET kbVCLibrary
Version           : :4.2,5.0,6.0
Issue type        : kbinfo

=============================================================================

THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.

Copyright Microsoft Corporation 2002.